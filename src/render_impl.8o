# Render functions used by _show-msg-render
:if KEEP_META_COMMENTS
#
# Define the CUSTOM_ variables above each function if you want to
# implement your own version.
:end

:unless CUSTOM_HANDLE_CONTROL
: handle-control

    #: Handle the next byte as a control escape.
    #:
    #: Assumes non-printable / control byte in current_byte_value
    #: Args:
    #:	 current_byte_value  : vN
    #:		 a current byte which is assumed to be CHAR_ESCAPE
    #:	 current_byte_index  : vN
    #:		 the current index in bytes into the string
    #: Updates:
    #: 	fg_color, bg_color, current_byte_value, current_char_index
    #: Clobbers:
    #:  vF
    #: Returns: void

  read-msg-byte current_byte_value
    if current_byte_value != CHAR_F then jump _handle-control-bg-color

        read-next-byte-as-color  fg_color
        jump _handle-control-end

    : _handle-control-bg-color
    if current_byte_value != CHAR_B then jump _handle-control-check-default

        read-next-byte-as-color  bg_color
        jump _handle-control-end

    : _handle-control-check-default
    if current_byte_value != CHAR_D then jump _handle-control-end

        set-bg-color COLOR_NONE
        set-fg-color COLOR_GRAY
        use-fg-color

    : _handle-control-end
return
:end

:unless CUSTOM_HANDLE_NEWLINE
: handle-newline

    #: Move to the next line down.
    #:
    #: Updates:
    #: 	draw_x, draw_y
    #: Clobbers:
    #:  vF
    #: Returns: void

    draw_y += GLYPH_STEP_Y_PX
    draw_x := msg_start_x
return
:end

:unless CUSTOM_HANDLE_RENDER_VISIBLE_GLYPH
: render-visible-glyph

    #: Render current_byte_value to the screen using the glyph table
    #:
    #: Args:
    #: 	 draw_x : vN
    #:		  The screen x position to draw to in pixels
    #:	 draw_y : vN
    #: 			The screen y position to draw to in pixels
    #:   current_byte_value : vN
    #:      A value which is in font_offsets and font_data.
    #:   bg_color: vN
    #:			Which planes to draw the background on, if any.
    #:	 fg_color: vN
    #:		  Which planes to draw the foreground on, if any.
    #: Clobbers:
    #:	 i, v0 - v3, vF
    #: Updates:
    #:   draw_x

    # skip bg if no bg
    if bg_color == 0 then jump _render_fg_glyph

        use-bg-color
        i := highlight_block_body
        sprite draw_x draw_y HIGHLIGHT_HEIGHT_PX

    # skip fg if no fg
    : _render_fg_glyph
    if fg_color == 0 then jump _render-visible-glyph-end

        # Figure out which block we need: start or main
        v2 := current_byte_value

        if current_byte_value < MAINBLOCK_START begin
            vF := CHAR_SPACE
        else
            vF := MAINBLOCK_START
        end
        v2 -= VF

        # Convert from integer index into byte offset
        v2 <<= v2

        # Look up the raw offset value within the font
        #i := long _font_offsets
        0xF0 0x00 :pointer font_offsets
        i += v2
        load v2 - v3

        # Combine with the base address for the font glyphs
        unpack-and-increment font_data v2 v3

        # Load the glyph data and render it
        i := _render_glyph_address
        save v0 - v1
        0xF0 0x00
        : _render_glyph_address
            0x00 0x00
        use-fg-color
        sprite draw_x draw_y GLYPH_DATA_HEIGHT_PX

    : _render-visible-glyph-end
    draw_x += GLYPH_STEP_X_PX
return
:end

:include "default_font_data.8o"